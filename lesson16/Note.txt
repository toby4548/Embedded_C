1. Pooling: cpu doing nothing but wating for some condition occur. ===> Stupid

2. Interrupt is cleverer. ==> Use a clock(==> System timer(SysTick) in ARM) and someone has to hear it when it rings. 

3. Preemption: The cpu is forced to execute interrupt instructions for the next instruction when interrupt line is high.

4. Use exclusive-OR operator(^=) to toggle the LED.(1->0, 0->1) 

5. The SysTick count down from the LOAD value to zero and initial to LOAD value again.
To enable it, set VAL to 0 and CTRL.

6. To enable interrupt, use function __enable_interrupt() to clean the PREMASK register.
remember to #include "intrinsics.h"